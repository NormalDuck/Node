[{"title":"Node","type":0,"sectionRef":"#","url":"/Node/api/Node","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Node","url":"/Node/api/Node#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Node","url":"/Node/api/Node#new","content":"&lt;/&gt; Node.new( x: number, y: number, DependentTable: Board ) → Node the constructor of the node.  "},{"title":"FindNode​","type":1,"pageTitle":"Node","url":"/Node/api/Node#FindNode","content":"&lt;/&gt; Node:FindNode( x: number, y: number ) → Node | nil find node using this node's coordinates  "},{"title":"FindNeighbors​","type":1,"pageTitle":"Node","url":"/Node/api/Node#FindNeighbors","content":"&lt;/&gt; Node:FindNeighbors() → {Node} | nil finds the the neighbors of the node (up, down, left right)  "},{"title":"FindSurroundings​","type":1,"pageTitle":"Node","url":"/Node/api/Node#FindSurroundings","content":"&lt;/&gt; Node:FindSurroundings() → {Node} | nil finds the surrounding of the node.  "},{"title":"FindSurroundingsDeep​","type":1,"pageTitle":"Node","url":"/Node/api/Node#FindSurroundingsDeep","content":"&lt;/&gt; Node:FindSurroundingsDeep(Depth: number) → {Node} | nil finds the surroundings, but you may specify how far the surrounding should be. caution this also includes their own node when returned, this is due to my implemetation  "},{"title":"AddData​","type":1,"pageTitle":"Node","url":"/Node/api/Node#AddData","content":"&lt;/&gt; Node:AddData( key: string,-- key to store data value: any-- inital data to store ) → () adds a data piece of data to the node. caution cannot add data that already exists, or it will throw a error  "},{"title":"OverrideData​","type":1,"pageTitle":"Node","url":"/Node/api/Node#OverrideData","content":"&lt;/&gt; Node:OverrideData( key: string,-- key to override data value: any | (oldData: any) → any-- inital data to store ) → () you may use both callback or just purely overriding data.  "},{"title":"RetriveData​","type":1,"pageTitle":"Node","url":"/Node/api/Node#RetriveData","content":"&lt;/&gt; Node:RetriveData( key: string-- the place to data ) → any-- the data that is attached abstraction for geting the data  "},{"title":"ReconcileData​","type":1,"pageTitle":"Node","url":"/Node/api/Node#ReconcileData","content":"&lt;/&gt; Node:ReconcileData(template: {[string]: any}) → Node reconciles data to the node. Returns self for internal reason. "},{"title":"Board","type":0,"sectionRef":"#","url":"/Node/api/Board","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Board","url":"/Node/api/Board#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Board","url":"/Node/api/Board#new","content":"&lt;/&gt; Board.new( length: number, width: number, nodeTemplate: {[string]: any},-- the template for nodes to reconcile. random: Random? ) → () constructs a new board, automatically creates all the nodes using length and width. If there is nodeTemplate then automatically reconciles the node with the template. If random is specified then any random calculations will be using the random you provided  "},{"title":"FindNode​","type":1,"pageTitle":"Board","url":"/Node/api/Board#FindNode","content":"&lt;/&gt; Board:FindNode( x: number, y: number ) → Node | nil finds the node in the board, if there is any  "},{"title":"RandomNode​","type":1,"pageTitle":"Board","url":"/Node/api/Board#RandomNode","content":"&lt;/&gt; Board:RandomNode() → Node s a random node in the board  "},{"title":"RandomRectangle​","type":1,"pageTitle":"Board","url":"/Node/api/Board#RandomRectangle","content":"&lt;/&gt; Board:RandomRectangle( length: number, width: number ) → {Node} finds a random rectangle  "},{"title":"RandomSquare​","type":1,"pageTitle":"Board","url":"/Node/api/Board#RandomSquare","content":"&lt;/&gt; Board:RandomSquare(size: number) → {Node} finds a random square in the table "}]